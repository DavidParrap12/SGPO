# nginx/nginx.conf
worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;

    upstream auth_service_upstream {
        server auth_service:3001; # sir-auth-service del docker-compose.yml
    }

    upstream personal_service_upstream {
        server personal_service:3002; # sir-personal-service del docker-compose.yml
    }

    # Aquí irían más "upstream" para cada microservicio

    server {
        listen 80; # Nginx escuchará en el puerto 80

        location /api/auth/ {
            proxy_pass http://auth_service_upstream/; # Envía al servicio de autenticación
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/personal/ {
            proxy_pass http://personal_service_upstream/; # Envía al servicio de personal
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Si tienes un frontend estático (ej. React build), lo servirías aquí
        # location / {
        #     root /usr/share/nginx/html; # Ruta dentro del contenedor Nginx
        #     index index.html index.htm;
        #     try_files $uri $uri/ /index.html;
        # }

        # O si el frontend corre en su propio puerto (como en el docker-compose.yml)
        # puedes configurarlo para que el frontend web llame a localhost/api/...
    }
}